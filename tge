#!/usr/bin/env python3

import os
import re
import sys
import subprocess

games = {
    "tetris" : {
        "run": ["term", "webgl"]
    },
    "luoxuan" : {
        "run": ["term"]
    },
    "towerd" : {
        "run": ["term"]
    },
    "snake" : {
        "run": ["term"]
    },
    "jump" : {
        "run": ["term"]
    },
    "city" : {
        "run": ["term"]
    },
    "unblock" : {
        "run": ["term"]
    },
    "obj3d" : {
        "run": ["webgl"]
    },
    "scene3d" : {
        "run": ["webgl"]
    },
    "simple3d" : {
        "run": ["webgl"]
    },
    "asc2editor" : {
        "path": "tool/",
        "run": ["term"]
    },
    "art2js" : {
        "path": "tool/",
        "run": ["term"]
    }
}


Color= {
        'black':30,  'red':31,
        'green':32,  'yellow':33,
        'blue':34,   'mag':35,
        'cyan':36,   'white':37
}
def printColor(color, msg, crlf=True):
    sys.stdout.write('\033[1;'+str(Color[color])+'m'+msg+'\033[0m')
    if crlf: sys.stdout.write('\n')
    sys.stdout.flush()


def make_cmd_line(name, exargs=[]):
    cmds = []
    rcs = {}

    if name not in games:
        printColor("red", "Game:"+name+" not in list...")
        sys.exit(0)

    g = games[name]
    runenv = g["run"]
    path = g["path"] if "path" in g else "games/"

    cmds.append("echo|green|üçÄ TSC...")
    tsccmd = "tsc -t es5 --outdir tmp/ src/"+path+name+"/main.ts"
    cmds.append(tsccmd)

    if "term" in runenv:
        rcs["term"] = "node tmp/"+path+name+"/main.js "+' '.join(exargs)

    if "webgl" in runenv:
        cmds.append("echo|green|üçÄ Browserify for web...")
        cmds.append("browserify tmp/"+path+name+ \
                "/main.js --ignore-missing -o tmp/"+name+"_bundle.js")
        cmds.append("cp src/"+path+name+"/"+name+"_gl.html tmp/")
        hp = 'http://127.0.0.1:8866/'
        rcs["webgl"] = "open "+hp+"tmp/"+name+"_gl.html"

    return cmds, rcs


def prepareTool():
    if not os.path.exists('node_modules/blessed/lib/unicode.js'):
        printColor('green', 'üçÄ NPM install...')
        c = 'npm install'
        print(c)
        os.system(c)

    patched = subprocess.getstatusoutput('grep zipxing node_modules/blessed/lib/unicode.js')
    pt = patched[1].split('\n')
    if len(pt[0])==0:
        printColor('green', 'üçÄ Patch blessed for emoji...')
        c = 'cp -f etc/vendor/unicode.js node_modules/blessed/lib/unicode.js'
        print(c)
        os.system(c)

    if not os.path.exists('tmp/tool/art2js/main.js'):
        b, r = make_cmd_line('art2js')
        execCmds(b)
    if not os.path.exists('tmp/tool/asc2editor/main.js'):
        b, r = make_cmd_line('asc2editor')
        execCmds(b)


def printUsage():
    printColor('yellow', 'üèñ  TGE building script usage:')
    printColor('white', '\nBuild game:')
    printColor('green', '  ./tge b <game-name>')
    printColor('white', '\nRun in term:')
    printColor('green', '  ./tge r <game-name> <...>')
    printColor('white', '\nRun in browser:')
    printColor('green', '  ./tge rw <game-name> <...>')
    printColor('white', '\nBuild & run:')
    printColor('green', '  ./tge br <game-name> <...>')
    printColor('green', '  ./tge brw <game-name> <...>')
    print('')


def execCmds(cmds):
    for c in cmds:
        if c.startswith('echo'):
            printColor(*c.split('|')[1:])
        else:
            print(c)
            os.system(c);


def prepareHttpServer():
    printColor('green', 'üçÄ Check http-server...', False)
    hsok = False
    findhs = subprocess.getstatusoutput("ps -ef | grep http-server | grep -v grep | awk '{print $2}'")
    if findhs[0]==0:
        hsinfo = subprocess.getstatusoutput("lsof -p "+findhs[1]+" | grep -E 'LISTEN|tge'")
        if hsinfo[0]==0:
            ret = hsinfo[1].split('\n')
            if len(ret)==2:
                hsok = True
                printColor('green', 'OK!')
    if not hsok:
        printColor('green', 'not found!')
        printColor('green', 'üçÄ Load http-server...', False)
        cmd = 'node node_modules/http-server/bin/http-server ./ -p8866 > /dev/null 2>/dev/null &'
        shs = subprocess.getstatusoutput(cmd)
        if shs[0]==0:
            printColor('green', 'OK!')


if __name__ == "__main__":
    if len(sys.argv)<3:
        printUsage()
        sys.exit(0)

    os.chdir(sys.path[0])

    prepareTool()

    cmd = sys.argv[1]
    game = sys.argv[2]
    oargs = sys.argv[3:]

    b, r = make_cmd_line(game, oargs)

    if 'b' in cmd and b:
        execCmds(b)
        printColor('yellow', 'Build ok...üç∫')

    if 'r' in cmd and r:
        runenv = games[game]['run']
        if 'w' in cmd:
            if "webgl" in runenv:
                prepareHttpServer()
                printColor('mag', 'üöÄ '+r['webgl'])
                os.system(r['webgl'])
            else:
                printColor('red', "No webgl mode!")
        else:
            printColor('mag', 'üöÄ '+r['term'])
            os.system(r['term'])


