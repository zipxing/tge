#!/usr/bin/env python3

import os
import re
import sys
import subprocess

games = {
    "engine" : {
        "path": "src/engine",
        "namespace": "tge",
        "run": [],
        "src" : [
            "tge.ts",
            "log.ts",
            "event.ts",
            "timer.ts",
            "ascii.ts"
        ]
    },
    "engine3d" : {
        "path": "src/engine/webgl",
        "namespace": "tge3d",
        "run": [],
        "src" : [
            "core/*.ts",
            "math/*.ts"
        ]
    },
    "tetris" : {
        "path": "src/games/tetris",
        "namespace": "Tetris",
        "run": ["terminal", "webterm", "webgl"],
        "src": [
            "constant.ts",
            "block.ts",
            "stage_bmp.ts",
            "core.ts",
            "stat.ts",
            "replay.ts",
            "grid.ts",
            "ai.ts",
            "model.ts",
            "render.ts",
            "render_webgl.ts",
            "game.ts",
            "main.ts"
        ]
    },
    "snake" : {
        "path": "src/games/snake",
        "namespace": "Snake",
        "run": ["terminal", "webterm"],
        "terminal": True,
        "web": True,
        "src": [
            "model.ts",
            "render.ts",
            "game.ts",
            "main.ts"
        ]
    },
    "jump" : {
        "path": "src/games/jump",
        "namespace": "Jump",
        "run": ["terminal", "webterm"],
        "terminal": True,
        "web": True,
        "src": [
            "model.ts",
            "render.ts",
            "game.ts",
            "main.ts"
        ]
    },
    "city" : {
        "path": "src/games/city",
        "namespace": "City",
        "run": ["terminal", "webterm"],
        "terminal": True,
        "web": True,
        "src": [
            "model.ts",
            "render.ts",
            "game.ts",
            "main.ts"
        ]
    },
    "unblock" : {
        "path": "src/games/unblock",
        "namespace": "Unblock",
        "run": ["terminal", "webterm"],
        "terminal": True,
        "web": True,
        "src": [
            "constant.ts",
            "model.ts",
            "mouse.ts",
            "render.ts",
            "game.ts",
            "main.ts"
        ]
    },
    "obj3d" : {
        "path": "src/games/obj3d",
        "namespace": "Obj3d",
        "run": ["webgl"],
        "src": [
            "model.ts",
            "render.ts",
            "game.ts",
            "mouse.ts",
            "main.ts"
        ]
    },
    "simple3d" : {
        "path": "src/games/simple3d",
        "namespace": "Simple3d",
        "run": ["webgl"],
        "src": [
            "model.ts",
            "render.ts",
            "game.ts",
            "mouse.ts",
            "main.ts"
        ]
    },
    "ascii" : {
        "path": "src/tool/asc2editor",
        "namespace": "AscIIEditor",
        "run": ["terminal"],
        "src": [
            "model.ts",
            "render.ts",
            "game.ts",
            "main.ts"
        ]
    },
    "art2js" : {
        "path": "src/tool/art2js",
        "namespace": "Art2Js",
        "run": ["terminal"],
        "src": [
            "main.ts"
        ]
    }
}


Color= {
        'black':30,  'red':31,
        'green':32,  'yellow':33,
        'blue':34,   'mag':35,
        'cyan':36,   'white':37
}
def printColor(color, msg, crlf=True):
    sys.stdout.write('\033[1;'+str(Color[color])+'m'+msg+'\033[0m')
    if crlf: sys.stdout.write('\n')
    sys.stdout.flush()


def grepArt(path):
    art_dict = {}
    arts = subprocess.getstatusoutput('grep "loadArtFile(" -R '+path)
    ats = arts[1].split('\n')
    for a in ats:
        m = re.match(r'.*[\"|\'](.*)[\"|\'].*[\"|\'](.*)[\"|\'].*', a)
        if m:
            p, n = m.group(1), m.group(2)
            art_dict[p]=n
    arts = subprocess.getstatusoutput('grep "loadArtFileSEQ(" -R '+path)
    ats = arts[1].split('\n')
    for a in ats:
        m = re.match(r'.*[\"|\'](.*)[\"|\'].*[\"|\'](.*)[\"|\'].*,(.*)\).*', a)
        if m:
            p, n, c = m.group(1), m.group(2), m.group(3)
            for i in range(int(c)):
                art_dict[p+n+str(i)+'.txt']=n+str(i)
    return art_dict


def make_build_cmd_line(name):
    cmds = []

    if name not in games:
        printColor("red", "Game:"+name+" not in list...")
        sys.exit(0)

    g = games[name]
    runenv = g['run']

    if len(runenv) == 0:
        printColor("red", "Engine can't build independent...")
        sys.exit(0)

    pe = ' '+games["engine"]["path"]+'/'
    pe3d = ' '+games["engine3d"]["path"]+'/'
    pg = ' '+g["path"]+'/'
    se = games["engine"]["src"]
    se3d = games["engine3d"]["src"]
    sg = g["src"]
    artjs = ''

    #convert ascii art to javascript for web-terminal...
    if "webterm" in runenv:
        arts = grepArt(pg)
        if len(arts)>0:
            cmds.append("echo|green|üçÄ Art2Js...")
        for a in arts:
            cmds.append("node tmp/art2js.js "+a+' '+ \
                    g["namespace"]+ \
                    ' '+arts[a]+' tmp/'+arts[a]+'.ts')
            artjs+=' tmp/'+arts[a]+'.ts '

    cmds.append("echo|green|üçÄ TSC...")
    tsccmd = "tsc -t es5 --outfile tmp/"+name+".js "+pe+pe.join(se)
    if "webgl" in runenv:
        tsccmd += (pe3d+pe3d.join(se3d))
    if "webterm" in runenv:
        tsccmd += artjs
    tsccmd+=(pg+pg.join(sg))
    cmds.append(tsccmd)

    if "webterm" in runenv or "webgl" in runenv:
        cmds.append("echo|green|üçÄ Browserify for web...")
        cmds.append("browserify tmp/"+name+ \
                ".js --ignore-missing -o tmp/"+name+"_bundle.js")
    if "webterm" in runenv:
        cmds.append("cp src/games/"+name+"/"+name+".html tmp/")
    if "webgl" in runenv:
        cmds.append("cp src/games/"+name+"/"+name+"_gl.html tmp/")

    return cmds


def make_run_cmd_line(name, exargs=[]):
    g = games[name]
    runenv = g['run']
    rcs = {}
    if "terminal" in runenv:
        rcs["terminal"] = "node tmp/"+name+".js "+' '.join(exargs)

    if "webterm" in runenv:
        rcs["webterm"] = "open tmp/"+name+".html"

    if "webgl" in runenv:
        hp = 'http://127.0.0.1:8866/'
        rcs["webgl"] = "open "+hp+"tmp/"+name+"_gl.html"

    return rcs


def prepareTool():
    if not os.path.exists('node_modules/blessed/lib/unicode.js'):
        printColor('green', 'üçÄ NPM install...')
        c = 'npm install'
        print(c)
        os.system(c)

    patched = subprocess.getstatusoutput('grep zipxing node_modules/blessed/lib/unicode.js')
    pt = patched[1].split('\n')
    if len(pt[0])==0:
        printColor('green', 'üçÄ Patch blessed for emoji...')
        c = 'cp -f etc/vendor/unicode.js node_modules/blessed/lib/unicode.js'
        print(c)
        os.system(c)

    if not os.path.exists('tmp/art2js.js'):
        r = make_build_cmd_line('art2js')
        execCmds(r)
    if not os.path.exists('tmp/ascii.js'):
        r = make_build_cmd_line('ascii')
        execCmds(r)


def printUsage():
    printColor('yellow', 'üèñ  TGE building script usage:')
    printColor('white', '\nBuild game:')
    printColor('green', '  ./tge b <game-name>')
    printColor('white', '\nRun in terminal:')
    printColor('green', '  ./tge r <game-name> <...>')
    printColor('white', '\nRun in browser:')
    printColor('green', '  ./tge rw <game-name> <...>')
    printColor('white', '\nBuild & run:')
    printColor('green', '  ./tge br <game-name> <...>')
    printColor('green', '  ./tge brw <game-name> <...>')
    print('')


def execCmds(cmds):
    for c in cmds:
        if c.startswith('echo'):
            printColor(*c.split('|')[1:])
        else:
            print(c)
            os.system(c);


def prepareHttpServer():
    printColor('green', 'üçÄ Check http-server...', False)
    hsok = False
    findhs = subprocess.getstatusoutput("ps -ef | grep http-server | grep -v grep | awk '{print $2}'")
    if findhs[0]==0:
        hsinfo = subprocess.getstatusoutput("lsof -p "+findhs[1]+" | grep -E 'LISTEN|tge'")
        if hsinfo[0]==0:
            ret = hsinfo[1].split('\n')
            if len(ret)==2:
                hsok = True
                printColor('green', 'OK!')
    if not hsok:
        printColor('green', 'not found!')
        printColor('green', 'üçÄ Load http-server...', False)
        cmd = 'node node_modules/http-server/bin/http-server ./ -p8866 > /dev/null 2>/dev/null &'
        shs = subprocess.getstatusoutput(cmd)
        if shs[0]==0:
            printColor('green', 'OK!')


if __name__ == "__main__":
    if len(sys.argv)<3:
        printUsage()
        sys.exit(0)

    os.chdir(sys.path[0])

    prepareTool()

    cmd = sys.argv[1]
    game = sys.argv[2]
    oargs = sys.argv[3:]

    b = make_build_cmd_line(game)
    r = make_run_cmd_line(game, oargs)

    if 'b' in cmd and b:
        execCmds(b)
        printColor('yellow', 'Build ok...üç∫')

    if 'r' in cmd and r:
        runenv = games[game]['run']
        if 'w' in cmd:
            if "webgl" in runenv:
                prepareHttpServer()
                printColor('mag', 'üöÄ '+r['webgl'])
                os.system(r['webgl'])
            else:
                printColor('red', "No webgl mode!")
        elif 't' in cmd:
            if "webterm" in runenv:
                printColor('mag', 'üöÄ '+r['webterm'])
                os.system(r['webterm'])
            else:
                printColor('red', "No webterm mode!")
        else:
            printColor('mag', 'üöÄ '+r['terminal'])
            os.system(r['terminal'])


